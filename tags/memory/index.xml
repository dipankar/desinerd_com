<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>memory on Dipankar&#39;s blog</title>
    <link>https://www.desinerd.com/tags/memory/</link>
    <description>Recent content in memory on Dipankar&#39;s blog</description>
    <image>
      <title>Dipankar&#39;s blog</title>
      <url>https://www.desinerd.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.desinerd.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Mar 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://www.desinerd.com/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>bye bye kaspersky, welcome avast</title>
      <link>https://www.desinerd.com/posts/bye-bye-kaspersky-welcome-avast/</link>
      <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.desinerd.com/posts/bye-bye-kaspersky-welcome-avast/</guid>
      <description>Well not a marketing post, I recently bought KAV or Kaspersky anti-virus for all the windows machines that I run. Lately it has become extremely bloated and well it brought all my machines down to their knees. The goal of running lean and mean, while giving me optimal online protection seems to be lost on them.
Being the engineer that I am, my response was to find out the leanest one around [for free].</description>
    </item>
    
    <item>
      <title>Nginx &#43; django fcgi lessons</title>
      <link>https://www.desinerd.com/posts/nginx-django-fcgi-lessons/</link>
      <pubDate>Mon, 19 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.desinerd.com/posts/nginx-django-fcgi-lessons/</guid>
      <description>Today was a good day as i learned some valuable lessons about django and nginx. ALWAYS close the database cursor in django, it can lead to some pretty wierd memory issues going forward. FIND the most optimal number of database connections you initialize for you connection pooling. This will let you optimize on memory going forward. ENSURE that you do not set a very high client_timeout, this means that if connections are not explicitly not closed by the client then the web server will not timeout.</description>
    </item>
    
  </channel>
</rss>
